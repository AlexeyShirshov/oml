'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports Worm.Orm

Namespace test
	
	<Worm.Orm.EntityAttribute(GetType(test.Aspnet_Membership.Aspnet_MembershipSchemaDef), "1", EntityName:="Aspnet_Membership")>  _
	Public Class Aspnet_Membership
		Inherits Worm.Orm.OrmBase
		
		#Region "Private Fields"
		Private _applicationId As test.Aspnet_Applications
		
		Private _userId As System.Guid
		
		Private _password As String
		
		Private _passwordFormat As Integer
		
		Private _passwordSalt As String
		
		Private _mobilePIN As String
		
		Private _email As String
		
		Private _loweredEmail As String
		
		Private _passwordQuestion As String
		
		Private _passwordAnswer As String
		
		Private _isApproved As Boolean
		
		Private _isLockedOut As Boolean
		
		Private _createDate As Date
		
		Private _lastLoginDate As Date
		
		Private _lastPasswordChangedDate As Date
		
        Private _lastLockoutDate As System.Nullable(Of Date)
		
		Private _failedPasswordAttemptCount As Integer
		
		Private _failedPasswordAttemptWindowStart As Date
		
		Private _failedPasswordAnswerAttemptCount As Integer
		
		Private _failedPasswordAnswerAttemptWindowStart As Date
		
		Private _comment As String
		#End Region
		
		#Region "Constructors"
		Public Sub New()
			MyBase.New
		End Sub
		
		Public Sub New(ByVal id As Integer, ByVal cache As Worm.Orm.OrmCacheBase, ByVal schema As Worm.Orm.OrmSchemaBase)
			MyBase.New(id, cache, schema)
		End Sub
		#End Region
		
		#Region "Description Properties"
		<Worm.Orm.ColumnAttribute("ApplicationId", Worm.Orm.Field2DbRelations.None)>  _
		Public Overridable Property ApplicationId() As test.Aspnet_Applications
			Get
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(true, "ApplicationId")
					Return Me._applicationId
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Get
			Set
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(false, "ApplicationId")
					Me._applicationId = value
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Set
		End Property
		
		<Worm.Orm.ColumnAttribute("UserId", Worm.Orm.Field2DbRelations.PK)>  _
		Public Overridable Property UserId() As System.Guid
			Get
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(true, "UserId")
					Return Me._userId
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Get
			Set
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(false, "UserId")
					Me._userId = value
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Set
		End Property
		
		<Worm.Orm.ColumnAttribute("Password", Worm.Orm.Field2DbRelations.None)>  _
		Public Overridable Property Password() As String
			Get
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(true, "Password")
					Return Me._password
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Get
			Set
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(false, "Password")
					Me._password = value
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Set
		End Property
		
		<Worm.Orm.ColumnAttribute("PasswordFormat", Worm.Orm.Field2DbRelations.None)>  _
		Public Overridable Property PasswordFormat() As Integer
			Get
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(true, "PasswordFormat")
					Return Me._passwordFormat
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Get
			Set
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(false, "PasswordFormat")
					Me._passwordFormat = value
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Set
		End Property
		
		<Worm.Orm.ColumnAttribute("PasswordSalt", Worm.Orm.Field2DbRelations.None)>  _
		Public Overridable Property PasswordSalt() As String
			Get
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(true, "PasswordSalt")
					Return Me._passwordSalt
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Get
			Set
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(false, "PasswordSalt")
					Me._passwordSalt = value
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Set
		End Property
		
		<Worm.Orm.ColumnAttribute("MobilePIN", Worm.Orm.Field2DbRelations.None)>  _
		Public Overridable Property MobilePIN() As String
			Get
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(true, "MobilePIN")
					Return Me._mobilePIN
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Get
			Set
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(false, "MobilePIN")
					Me._mobilePIN = value
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Set
		End Property
		
		<Worm.Orm.ColumnAttribute("Email", Worm.Orm.Field2DbRelations.None)>  _
		Public Overridable Property Email() As String
			Get
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(true, "Email")
					Return Me._email
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Get
			Set
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(false, "Email")
					Me._email = value
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Set
		End Property
		
		<Worm.Orm.ColumnAttribute("LoweredEmail", Worm.Orm.Field2DbRelations.None)>  _
		Public Overridable Property LoweredEmail() As String
			Get
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(true, "LoweredEmail")
					Return Me._loweredEmail
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Get
			Set
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(false, "LoweredEmail")
					Me._loweredEmail = value
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Set
		End Property
		
		<Worm.Orm.ColumnAttribute("PasswordQuestion", Worm.Orm.Field2DbRelations.None)>  _
		Public Overridable Property PasswordQuestion() As String
			Get
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(true, "PasswordQuestion")
					Return Me._passwordQuestion
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Get
			Set
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(false, "PasswordQuestion")
					Me._passwordQuestion = value
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Set
		End Property
		
		<Worm.Orm.ColumnAttribute("PasswordAnswer", Worm.Orm.Field2DbRelations.None)>  _
		Public Overridable Property PasswordAnswer() As String
			Get
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(true, "PasswordAnswer")
					Return Me._passwordAnswer
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Get
			Set
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(false, "PasswordAnswer")
					Me._passwordAnswer = value
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Set
		End Property
		
		<Worm.Orm.ColumnAttribute("IsApproved", Worm.Orm.Field2DbRelations.None)>  _
		Public Overridable Property IsApproved() As Boolean
			Get
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(true, "IsApproved")
					Return Me._isApproved
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Get
			Set
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(false, "IsApproved")
					Me._isApproved = value
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Set
		End Property
		
		<Worm.Orm.ColumnAttribute("IsLockedOut", Worm.Orm.Field2DbRelations.None)>  _
		Public Overridable Property IsLockedOut() As Boolean
			Get
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(true, "IsLockedOut")
					Return Me._isLockedOut
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Get
			Set
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(false, "IsLockedOut")
					Me._isLockedOut = value
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Set
		End Property
		
		<Worm.Orm.ColumnAttribute("CreateDate", Worm.Orm.Field2DbRelations.None)>  _
		Public Overridable Property CreateDate() As Date
			Get
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(true, "CreateDate")
					Return Me._createDate
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Get
			Set
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(false, "CreateDate")
					Me._createDate = value
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Set
		End Property
		
		<Worm.Orm.ColumnAttribute("LastLoginDate", Worm.Orm.Field2DbRelations.None)>  _
		Public Overridable Property LastLoginDate() As Date
			Get
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(true, "LastLoginDate")
					Return Me._lastLoginDate
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Get
			Set
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(false, "LastLoginDate")
					Me._lastLoginDate = value
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Set
		End Property
		
		<Worm.Orm.ColumnAttribute("LastPasswordChangedDate", Worm.Orm.Field2DbRelations.None)>  _
		Public Overridable Property LastPasswordChangedDate() As Date
			Get
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(true, "LastPasswordChangedDate")
					Return Me._lastPasswordChangedDate
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Get
			Set
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(false, "LastPasswordChangedDate")
					Me._lastPasswordChangedDate = value
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Set
		End Property
		
		<Worm.Orm.ColumnAttribute("LastLockoutDate", Worm.Orm.Field2DbRelations.None)>  _
		Public Overridable Property LastLockoutDate() As System.Nullable(Of Date)
			Get
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(true, "LastLockoutDate")
					Return Me._lastLockoutDate
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Get
			Set
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(false, "LastLockoutDate")
					Me._lastLockoutDate = value
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Set
		End Property
		
		<Worm.Orm.ColumnAttribute("FailedPasswordAttemptCount", Worm.Orm.Field2DbRelations.None)>  _
		Public Overridable Property FailedPasswordAttemptCount() As Integer
			Get
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(true, "FailedPasswordAttemptCount")
					Return Me._failedPasswordAttemptCount
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Get
			Set
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(false, "FailedPasswordAttemptCount")
					Me._failedPasswordAttemptCount = value
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Set
		End Property
		
		<Worm.Orm.ColumnAttribute("FailedPasswordAttemptWindowStart", Worm.Orm.Field2DbRelations.None)>  _
		Public Overridable Property FailedPasswordAttemptWindowStart() As Date
			Get
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(true, "FailedPasswordAttemptWindowStart")
					Return Me._failedPasswordAttemptWindowStart
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Get
			Set
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(false, "FailedPasswordAttemptWindowStart")
					Me._failedPasswordAttemptWindowStart = value
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Set
		End Property
		
		<Worm.Orm.ColumnAttribute("FailedPasswordAnswerAttemptCount", Worm.Orm.Field2DbRelations.None)>  _
		Public Overridable Property FailedPasswordAnswerAttemptCount() As Integer
			Get
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(true, "FailedPasswordAnswerAttemptCount")
					Return Me._failedPasswordAnswerAttemptCount
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Get
			Set
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(false, "FailedPasswordAnswerAttemptCount")
					Me._failedPasswordAnswerAttemptCount = value
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Set
		End Property
		
		<Worm.Orm.ColumnAttribute("FailedPasswordAnswerAttemptWindowStart", Worm.Orm.Field2DbRelations.None)>  _
		Public Overridable Property FailedPasswordAnswerAttemptWindowStart() As Date
			Get
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(true, "FailedPasswordAnswerAttemptWindowStart")
					Return Me._failedPasswordAnswerAttemptWindowStart
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Get
			Set
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(false, "FailedPasswordAnswerAttemptWindowStart")
					Me._failedPasswordAnswerAttemptWindowStart = value
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Set
		End Property
		
		<Worm.Orm.ColumnAttribute("Comment", Worm.Orm.Field2DbRelations.None)>  _
		Public Overridable Property Comment() As String
			Get
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(true, "Comment")
					Return Me._comment
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Get
			Set
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(false, "Comment")
					Me._comment = value
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Set
		End Property
		#End Region
		
		#Region "Static members"
		'''<summary>
		'''Метод копирует (потоко-небезопасно) значения полей одного объекта в другой
		'''</summary>
		Protected Shared Sub CopyAspnet_Membership(ByVal from As test.Aspnet_Membership, ByVal [to] As test.Aspnet_Membership)
			[to]._applicationId = from._applicationId
			[to]._userId = from._userId
			[to]._password = from._password
			[to]._passwordFormat = from._passwordFormat
			[to]._passwordSalt = from._passwordSalt
			[to]._mobilePIN = from._mobilePIN
			[to]._email = from._email
			[to]._loweredEmail = from._loweredEmail
			[to]._passwordQuestion = from._passwordQuestion
			[to]._passwordAnswer = from._passwordAnswer
			[to]._isApproved = from._isApproved
			[to]._isLockedOut = from._isLockedOut
			[to]._createDate = from._createDate
			[to]._lastLoginDate = from._lastLoginDate
			[to]._lastPasswordChangedDate = from._lastPasswordChangedDate
			[to]._lastLockoutDate = from._lastLockoutDate
			[to]._failedPasswordAttemptCount = from._failedPasswordAttemptCount
			[to]._failedPasswordAttemptWindowStart = from._failedPasswordAttemptWindowStart
			[to]._failedPasswordAnswerAttemptCount = from._failedPasswordAnswerAttemptCount
			[to]._failedPasswordAnswerAttemptWindowStart = from._failedPasswordAnswerAttemptWindowStart
			[to]._comment = from._comment
		End Sub
		#End Region
		
		Protected Overrides Sub CopyBody(ByVal from As Worm.Orm.OrmBase, ByVal [to] As Worm.Orm.OrmBase)
			test.Aspnet_Membership.CopyAspnet_Membership(CType(from,test.Aspnet_Membership), CType([to],test.Aspnet_Membership))
		End Sub
		
		Public Overloads Overrides Function CreateSortComparer(Of T As  {Worm.Orm.OrmBase, New})(ByVal sort As String, ByVal sortType As Worm.Orm.SortType) As System.Collections.Generic.IComparer(Of T)
			Throw New System.NotImplementedException("The method or operation is not implemented.")
		End Function
		
		Public Overloads Overrides Function CreateSortComparer(ByVal sort As String, ByVal sortType As Worm.Orm.SortType) As System.Collections.IComparer
			Throw New System.NotImplementedException("The method or operation is not implemented.")
		End Function
		
		Public Overrides Sub SetValue(ByVal pi As System.Reflection.PropertyInfo, ByVal c As Worm.Orm.ColumnAttribute, ByVal value As Object)
			If (c.FieldName = "UserId") Then
				Me._userId = CType(value,System.Guid)
				Return
			End If
			If (c.FieldName = "Password") Then
				Me._password = CType(value,String)
				Return
			End If
			If (c.FieldName = "PasswordFormat") Then
				Me._passwordFormat = CType(value,Integer)
				Return
			End If
			If (c.FieldName = "PasswordSalt") Then
				Me._passwordSalt = CType(value,String)
				Return
			End If
			If (c.FieldName = "MobilePIN") Then
				Me._mobilePIN = CType(value,String)
				Return
			End If
			If (c.FieldName = "Email") Then
				Me._email = CType(value,String)
				Return
			End If
			If (c.FieldName = "LoweredEmail") Then
				Me._loweredEmail = CType(value,String)
				Return
			End If
			If (c.FieldName = "PasswordQuestion") Then
				Me._passwordQuestion = CType(value,String)
				Return
			End If
			If (c.FieldName = "PasswordAnswer") Then
				Me._passwordAnswer = CType(value,String)
				Return
			End If
			If (c.FieldName = "IsApproved") Then
				Me._isApproved = CType(value,Boolean)
				Return
			End If
			If (c.FieldName = "IsLockedOut") Then
				Me._isLockedOut = CType(value,Boolean)
				Return
			End If
			If (c.FieldName = "CreateDate") Then
				Me._createDate = CType(value,Date)
				Return
			End If
			If (c.FieldName = "LastLoginDate") Then
				Me._lastLoginDate = CType(value,Date)
				Return
			End If
			If (c.FieldName = "LastPasswordChangedDate") Then
				Me._lastPasswordChangedDate = CType(value,Date)
				Return
			End If
			If (c.FieldName = "LastLockoutDate") Then
				Me._lastLockoutDate = CType(value,System.Nullable(Of Date))
				Return
			End If
			If (c.FieldName = "FailedPasswordAttemptCount") Then
				Me._failedPasswordAttemptCount = CType(value,Integer)
				Return
			End If
			If (c.FieldName = "FailedPasswordAttemptWindowStart") Then
				Me._failedPasswordAttemptWindowStart = CType(value,Date)
				Return
			End If
			If (c.FieldName = "FailedPasswordAnswerAttemptCount") Then
				Me._failedPasswordAnswerAttemptCount = CType(value,Integer)
				Return
			End If
			If (c.FieldName = "FailedPasswordAnswerAttemptWindowStart") Then
				Me._failedPasswordAnswerAttemptWindowStart = CType(value,Date)
				Return
			End If
			If (c.FieldName = "Comment") Then
				Me._comment = CType(value,String)
				Return
			End If
			MyBase.SetValue(pi, c, value)
		End Sub
		
		Protected Overrides Function GetNew() As Worm.Orm.OrmBase
			Return New test.Aspnet_Membership(Me.Identifier, Me.OrmCache, Me.OrmSchema)
		End Function
		
		#Region "Nested Types"
		Public Class Aspnet_MembershipSchemaDef
			Implements Worm.Orm.IOrmObjectSchema, Worm.Orm.IOrmSchemaInit, Worm.Orm.IRelation
			
			#Region "Private Fields"
			Private _idx As Worm.Orm.OrmObjectIndex
			
			Private _tables() As Worm.Orm.OrmTable
			
			Private _forTablesLock As Object = New Object
			
			Private _m2mRelations() As Worm.Orm.M2MRelation
			
			Private _forM2MRelationsLock As Object = New Object
			
			Private _forIdxLock As Object = New Object
			
			Protected _schema As Worm.Orm.OrmSchemaBase
			
			Protected _entityType As System.Type
			#End Region
			
			#Region "Description Properties"
			Public Overridable ReadOnly Property IsExternalSort(ByVal sort As String) As Boolean Implements Worm.Orm.IOrmObjectSchema.IsExternalSort
				Get
					Return false
				End Get
			End Property
			#End Region
			
			Protected Overridable Function GetTypeMainTable(ByVal type As System.Type) As Worm.Orm.OrmTable
				Dim tables() As Worm.Orm.OrmTable
				tables = CType(Me._schema,Worm.Orm.IDbSchema).GetTables(type)
				Return CType(tables.GetValue(0),Worm.Orm.OrmTable)
			End Function
			
			#Region "Base type related members"
			Public Overridable Function GetTables() As Worm.Orm.OrmTable() Implements Worm.Orm.IOrmObjectSchema.GetTables
				If (Me._tables Is Nothing) Then
					Dim lockCachedExpression_df2d327c17fd4fc6938f12a15c7f5795 As Object = Me._forTablesLock
					System.Threading.Monitor.Enter(lockCachedExpression_df2d327c17fd4fc6938f12a15c7f5795)
					Try 
						If (Me._tables Is Nothing) Then
							Me._tables = New Worm.Orm.OrmTable() {New Worm.Orm.OrmTable("[dbo].[aspnet_Membership]")}
						End If
					Finally
						System.Threading.Monitor.Exit(lockCachedExpression_df2d327c17fd4fc6938f12a15c7f5795)
					End Try
				End If
				Return Me._tables
			End Function
			
			Protected Overridable Function GetTable(ByVal tbl As test.Aspnet_Membership.Aspnet_MembershipSchemaDef.TablesLink) As Worm.Orm.OrmTable
				Return CType(Me.GetTables.GetValue(CType(tbl,Integer)),Worm.Orm.OrmTable)
			End Function
			
			Public Overridable Function ChangeValueType(ByVal c As Worm.Orm.ColumnAttribute, ByVal value As Object, ByRef newvalue As Object) As Boolean Implements Worm.Orm.IOrmObjectSchema.ChangeValueType
				newvalue = value
				Return false
			End Function
			
			Public Overridable Function ExternalSort(ByVal sort As String, ByVal sortType As Worm.Orm.SortType, ByVal objs As System.Collections.IList) As System.Collections.IList Implements Worm.Orm.IOrmObjectSchema.ExternalSort
				Return objs
			End Function
			
			Public Overridable Function GetJoins(ByVal left As Worm.Orm.OrmTable, ByVal right As Worm.Orm.OrmTable) As Worm.Orm.OrmJoin Implements Worm.Orm.IOrmObjectSchema.GetJoins
				Return CType(Nothing, Worm.Orm.OrmJoin)
			End Function
			
			Public Overridable Function GetSuppressedColumns() As Worm.Orm.ColumnAttribute() Implements Worm.Orm.IOrmObjectSchema.GetSuppressedColumns
				Return New Worm.Orm.ColumnAttribute(-1) {}
			End Function
			
			Public Overridable Function GetFilter(ByVal filter_info As Object) As Worm.Orm.IOrmFilter Implements Worm.Orm.IOrmObjectSchema.GetFilter
				Return Nothing
			End Function
			
			Public Overridable Function MapSort2FieldName(ByVal sort As String) As String Implements Worm.Orm.IOrmObjectSchema.MapSort2FieldName
				Return Nothing
			End Function
			
			Public Overridable Function GetM2MRelations() As Worm.Orm.M2MRelation() Implements Worm.Orm.IOrmObjectSchema.GetM2MRelations
				If (Me._m2mRelations Is Nothing) Then
					Dim lockCachedExpression_01e6612989434e179f286a7a5c8bb6e8 As Object = Me._forM2MRelationsLock
					System.Threading.Monitor.Enter(lockCachedExpression_01e6612989434e179f286a7a5c8bb6e8)
					Try 
						If (Me._m2mRelations Is Nothing) Then
							Me._m2mRelations = New Worm.Orm.M2MRelation(-1) {}
						End If
					Finally
						System.Threading.Monitor.Exit(lockCachedExpression_01e6612989434e179f286a7a5c8bb6e8)
					End Try
				End If
				Return Me._m2mRelations
			End Function
			
			Public Overridable Function GetFieldColumnMap() As Worm.Orm.Collections.IndexedCollection(Of String, Worm.Orm.MapField2Column) Implements Worm.Orm.IOrmObjectSchema.GetFieldColumnMap
				If (Me._idx Is Nothing) Then
					Dim lockCachedExpression_913d95400a99402bb6dbf11915f9fbc6 As Object = Me._forIdxLock
					System.Threading.Monitor.Enter(lockCachedExpression_913d95400a99402bb6dbf11915f9fbc6)
					Try 
						If (Me._idx Is Nothing) Then
							Dim idx As Worm.Orm.OrmObjectIndex = New Worm.Orm.OrmObjectIndex
							idx.Add(New Worm.Orm.MapField2Column("ApplicationId", "ApplicationId", Me.GetTable(test.Aspnet_Membership.Aspnet_MembershipSchemaDef.TablesLink.tbldboaspnet_Membership)))
							idx.Add(New Worm.Orm.MapField2Column("UserId", "UserId", Me.GetTable(test.Aspnet_Membership.Aspnet_MembershipSchemaDef.TablesLink.tbldboaspnet_Membership)))
							idx.Add(New Worm.Orm.MapField2Column("Password", "Password", Me.GetTable(test.Aspnet_Membership.Aspnet_MembershipSchemaDef.TablesLink.tbldboaspnet_Membership)))
							idx.Add(New Worm.Orm.MapField2Column("PasswordFormat", "PasswordFormat", Me.GetTable(test.Aspnet_Membership.Aspnet_MembershipSchemaDef.TablesLink.tbldboaspnet_Membership)))
							idx.Add(New Worm.Orm.MapField2Column("PasswordSalt", "PasswordSalt", Me.GetTable(test.Aspnet_Membership.Aspnet_MembershipSchemaDef.TablesLink.tbldboaspnet_Membership)))
							idx.Add(New Worm.Orm.MapField2Column("MobilePIN", "MobilePIN", Me.GetTable(test.Aspnet_Membership.Aspnet_MembershipSchemaDef.TablesLink.tbldboaspnet_Membership)))
							idx.Add(New Worm.Orm.MapField2Column("Email", "Email", Me.GetTable(test.Aspnet_Membership.Aspnet_MembershipSchemaDef.TablesLink.tbldboaspnet_Membership)))
							idx.Add(New Worm.Orm.MapField2Column("LoweredEmail", "LoweredEmail", Me.GetTable(test.Aspnet_Membership.Aspnet_MembershipSchemaDef.TablesLink.tbldboaspnet_Membership)))
							idx.Add(New Worm.Orm.MapField2Column("PasswordQuestion", "PasswordQuestion", Me.GetTable(test.Aspnet_Membership.Aspnet_MembershipSchemaDef.TablesLink.tbldboaspnet_Membership)))
							idx.Add(New Worm.Orm.MapField2Column("PasswordAnswer", "PasswordAnswer", Me.GetTable(test.Aspnet_Membership.Aspnet_MembershipSchemaDef.TablesLink.tbldboaspnet_Membership)))
							idx.Add(New Worm.Orm.MapField2Column("IsApproved", "IsApproved", Me.GetTable(test.Aspnet_Membership.Aspnet_MembershipSchemaDef.TablesLink.tbldboaspnet_Membership)))
							idx.Add(New Worm.Orm.MapField2Column("IsLockedOut", "IsLockedOut", Me.GetTable(test.Aspnet_Membership.Aspnet_MembershipSchemaDef.TablesLink.tbldboaspnet_Membership)))
							idx.Add(New Worm.Orm.MapField2Column("CreateDate", "CreateDate", Me.GetTable(test.Aspnet_Membership.Aspnet_MembershipSchemaDef.TablesLink.tbldboaspnet_Membership)))
							idx.Add(New Worm.Orm.MapField2Column("LastLoginDate", "LastLoginDate", Me.GetTable(test.Aspnet_Membership.Aspnet_MembershipSchemaDef.TablesLink.tbldboaspnet_Membership)))
							idx.Add(New Worm.Orm.MapField2Column("LastPasswordChangedDate", "LastPasswordChangedDate", Me.GetTable(test.Aspnet_Membership.Aspnet_MembershipSchemaDef.TablesLink.tbldboaspnet_Membership)))
							idx.Add(New Worm.Orm.MapField2Column("LastLockoutDate", "LastLockoutDate", Me.GetTable(test.Aspnet_Membership.Aspnet_MembershipSchemaDef.TablesLink.tbldboaspnet_Membership)))
							idx.Add(New Worm.Orm.MapField2Column("FailedPasswordAttemptCount", "FailedPasswordAttemptCount", Me.GetTable(test.Aspnet_Membership.Aspnet_MembershipSchemaDef.TablesLink.tbldboaspnet_Membership)))
							idx.Add(New Worm.Orm.MapField2Column("FailedPasswordAttemptWindowStart", "FailedPasswordAttemptWindowStart", Me.GetTable(test.Aspnet_Membership.Aspnet_MembershipSchemaDef.TablesLink.tbldboaspnet_Membership)))
							idx.Add(New Worm.Orm.MapField2Column("FailedPasswordAnswerAttemptCount", "FailedPasswordAnswerAttemptCount", Me.GetTable(test.Aspnet_Membership.Aspnet_MembershipSchemaDef.TablesLink.tbldboaspnet_Membership)))
							idx.Add(New Worm.Orm.MapField2Column("FailedPasswordAnswerAttemptWindowStart", "FailedPasswordAnswerAttemptWindowStart", Me.GetTable(test.Aspnet_Membership.Aspnet_MembershipSchemaDef.TablesLink.tbldboaspnet_Membership)))
							idx.Add(New Worm.Orm.MapField2Column("Comment", "Comment", Me.GetTable(test.Aspnet_Membership.Aspnet_MembershipSchemaDef.TablesLink.tbldboaspnet_Membership)))
							Me._idx = idx
						End If
					Finally
						System.Threading.Monitor.Exit(lockCachedExpression_913d95400a99402bb6dbf11915f9fbc6)
					End Try
				End If
				Return Me._idx
			End Function
			#End Region
			
			#Region "IRelation Members"
			Public Overridable Function GetFirstType() As CoreFramework.Structures.Pair(Of String, System.Type) Implements Worm.Orm.IRelation.GetFirstType
				Return New CoreFramework.Structures.Pair(Of String, System.Type)("ApplicationId", Me._schema.GetTypeByEntityName("Aspnet_Users"))
			End Function
			
			Public Overridable Function GetSecondType() As CoreFramework.Structures.Pair(Of String, System.Type) Implements Worm.Orm.IRelation.GetSecondType
				Return New CoreFramework.Structures.Pair(Of String, System.Type)("UserId", Me._schema.GetTypeByEntityName("Aspnet_Applications"))
			End Function
			#End Region
			
			Public Overridable Sub GetSchema(ByVal schema As Worm.Orm.OrmSchemaBase, ByVal t As System.Type) Implements Worm.Orm.IOrmSchemaInit.GetSchema
				Me._schema = schema
				Me._entityType = t
			End Sub
			
			#Region "Nested Types"
			Public Enum TablesLink
				
				#Region "Private Fields"
				tbldboaspnet_Membership = 0
				#End Region
			End Enum
			#End Region
		End Class
		#End Region
	End Class
End Namespace
