'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports Worm.Orm

Namespace test
	
	<Worm.Orm.EntityAttribute(GetType(test.Ent2.Ent2SchemaDef), "1", EntityName:="Ent2")>  _
	Public Class Ent2
		Inherits Worm.Orm.OrmBase
		
		#Region "Private Fields"
		Private _id As Integer
		
		Private _name As String
		#End Region
		
		#Region "Constructors"
		Public Sub New()
			MyBase.New
		End Sub
		
		Public Sub New(ByVal id As Integer, ByVal cache As Worm.Orm.OrmCacheBase, ByVal schema As Worm.Orm.OrmSchemaBase)
			MyBase.New(id, cache, schema)
		End Sub
		#End Region
		
		#Region "Description Properties"
		<Worm.Orm.ColumnAttribute("Id", Worm.Orm.Field2DbRelations.PK)>  _
		Public Overridable Property Id() As Integer
			Get
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(true, "Id")
					Return Me._id
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Get
			Set
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(false, "Id")
					Me._id = value
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Set
		End Property
		
		<Worm.Orm.ColumnAttribute("Name", Worm.Orm.Field2DbRelations.None)>  _
		Public Overridable Property Name() As String
			Get
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(true, "Name")
					Return Me._name
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Get
			Set
				Dim syncHelper As System.IDisposable
				syncHelper = Nothing
				Try 
					syncHelper = Me.SyncHelper(false, "Name")
					Me._name = value
				Finally
					If (Not (syncHelper) Is Nothing) Then
						CType(syncHelper,System.IDisposable).Dispose
					End If
				End Try
			End Set
		End Property
		#End Region
		
		#Region "Static members"
		'''<summary>
		'''Метод копирует (потоко-небезопасно) значения полей одного объекта в другой
		'''</summary>
		Protected Shared Sub CopyEnt2(ByVal from As test.Ent2, ByVal [to] As test.Ent2)
			[to]._id = from._id
			[to]._name = from._name
		End Sub
		#End Region
		
		Protected Overrides Sub CopyBody(ByVal from As Worm.Orm.OrmBase, ByVal [to] As Worm.Orm.OrmBase)
			test.Ent2.CopyEnt2(CType(from,test.Ent2), CType([to],test.Ent2))
		End Sub
		
		Public Overloads Overrides Function CreateSortComparer(Of T As  {Worm.Orm.OrmBase, New})(ByVal sort As String, ByVal sortType As Worm.Orm.SortType) As System.Collections.Generic.IComparer(Of T)
			Throw New System.NotImplementedException("The method or operation is not implemented.")
		End Function
		
		Public Overloads Overrides Function CreateSortComparer(ByVal sort As String, ByVal sortType As Worm.Orm.SortType) As System.Collections.IComparer
			Throw New System.NotImplementedException("The method or operation is not implemented.")
		End Function
		
		Public Overrides Sub SetValue(ByVal pi As System.Reflection.PropertyInfo, ByVal c As Worm.Orm.ColumnAttribute, ByVal value As Object)
			If (c.FieldName = "Id") Then
				Me._id = CType(value,Integer)
				Return
			End If
			If (c.FieldName = "Name") Then
				Me._name = CType(value,String)
				Return
			End If
			MyBase.SetValue(pi, c, value)
		End Sub
		
		Protected Overrides Function GetNew() As Worm.Orm.OrmBase
			Return New test.Ent2(Me.Identifier, Me.OrmCache, Me.OrmSchema)
		End Function
		
		#Region "Nested Types"
		Public Class Ent2SchemaDef
			Implements Worm.Orm.IOrmObjectSchema, Worm.Orm.IOrmSchemaInit
			
			#Region "Private Fields"
			Private _idx As Worm.Orm.OrmObjectIndex
			
			Private _tables() As Worm.Orm.OrmTable
			
			Private _forTablesLock As Object = New Object
			
			Private _m2mRelations() As Worm.Orm.M2MRelation
			
			Private _forM2MRelationsLock As Object = New Object
			
			Private _forIdxLock As Object = New Object
			
			Protected _schema As Worm.Orm.OrmSchemaBase
			
			Protected _entityType As System.Type
			#End Region
			
			#Region "Description Properties"
			Public Overridable ReadOnly Property IsExternalSort(ByVal sort As String) As Boolean Implements Worm.Orm.IOrmObjectSchema.IsExternalSort
				Get
					Return false
				End Get
			End Property
			#End Region
			
			Protected Overridable Function GetTypeMainTable(ByVal type As System.Type) As Worm.Orm.OrmTable
				Dim tables() As Worm.Orm.OrmTable
				tables = CType(Me._schema,Worm.Orm.IDbSchema).GetTables(type)
				Return CType(tables.GetValue(0),Worm.Orm.OrmTable)
			End Function
			
			#Region "Base type related members"
			Public Overridable Function GetTables() As Worm.Orm.OrmTable() Implements Worm.Orm.IOrmObjectSchema.GetTables
				If (Me._tables Is Nothing) Then
					Dim lockCachedExpression_20e2449b4fb24e0aa920024cb84ccd86 As Object = Me._forTablesLock
					System.Threading.Monitor.Enter(lockCachedExpression_20e2449b4fb24e0aa920024cb84ccd86)
					Try 
						If (Me._tables Is Nothing) Then
							Me._tables = New Worm.Orm.OrmTable() {New Worm.Orm.OrmTable("[dbo].[ent2]")}
						End If
					Finally
						System.Threading.Monitor.Exit(lockCachedExpression_20e2449b4fb24e0aa920024cb84ccd86)
					End Try
				End If
				Return Me._tables
			End Function
			
			Protected Overridable Function GetTable(ByVal tbl As test.Ent2.Ent2SchemaDef.TablesLink) As Worm.Orm.OrmTable
				Return CType(Me.GetTables.GetValue(CType(tbl,Integer)),Worm.Orm.OrmTable)
			End Function
			
			Public Overridable Function ChangeValueType(ByVal c As Worm.Orm.ColumnAttribute, ByVal value As Object, ByRef newvalue As Object) As Boolean Implements Worm.Orm.IOrmObjectSchema.ChangeValueType
				newvalue = value
				Return false
			End Function
			
			Public Overridable Function ExternalSort(ByVal sort As String, ByVal sortType As Worm.Orm.SortType, ByVal objs As System.Collections.IList) As System.Collections.IList Implements Worm.Orm.IOrmObjectSchema.ExternalSort
				Return objs
			End Function
			
			Public Overridable Function GetJoins(ByVal left As Worm.Orm.OrmTable, ByVal right As Worm.Orm.OrmTable) As Worm.Orm.OrmJoin Implements Worm.Orm.IOrmObjectSchema.GetJoins
				Return CType(Nothing, Worm.Orm.OrmJoin)
			End Function
			
			Public Overridable Function GetSuppressedColumns() As Worm.Orm.ColumnAttribute() Implements Worm.Orm.IOrmObjectSchema.GetSuppressedColumns
				Return New Worm.Orm.ColumnAttribute(-1) {}
			End Function
			
			Public Overridable Function GetFilter(ByVal filter_info As Object) As Worm.Orm.IOrmFilter Implements Worm.Orm.IOrmObjectSchema.GetFilter
				Return Nothing
			End Function
			
			Public Overridable Function MapSort2FieldName(ByVal sort As String) As String Implements Worm.Orm.IOrmObjectSchema.MapSort2FieldName
				Return Nothing
			End Function
			
			Public Overridable Function GetM2MRelations() As Worm.Orm.M2MRelation() Implements Worm.Orm.IOrmObjectSchema.GetM2MRelations
				If (Me._m2mRelations Is Nothing) Then
					Dim lockCachedExpression_c79cd68b76bb45ce832e835669bb6933 As Object = Me._forM2MRelationsLock
					System.Threading.Monitor.Enter(lockCachedExpression_c79cd68b76bb45ce832e835669bb6933)
					Try 
						If (Me._m2mRelations Is Nothing) Then
							Me._m2mRelations = New Worm.Orm.M2MRelation() {New Worm.Orm.M2MRelation(Me._schema.GetTypeByEntityName("Ent1"), CType(Me._schema,Worm.Orm.IDbSchema).GetSharedTable("[dbo].[1to2]"), "ent1_id", true, New System.Data.Common.DataTableMapping, CType(Nothing,System.Type))}
						End If
					Finally
						System.Threading.Monitor.Exit(lockCachedExpression_c79cd68b76bb45ce832e835669bb6933)
					End Try
				End If
				Return Me._m2mRelations
			End Function
			
			Public Overridable Function GetFieldColumnMap() As Worm.Orm.Collections.IndexedCollection(Of String, Worm.Orm.MapField2Column) Implements Worm.Orm.IOrmObjectSchema.GetFieldColumnMap
				If (Me._idx Is Nothing) Then
					Dim lockCachedExpression_186948f5aec1454ebb40a0c621eef4df As Object = Me._forIdxLock
					System.Threading.Monitor.Enter(lockCachedExpression_186948f5aec1454ebb40a0c621eef4df)
					Try 
						If (Me._idx Is Nothing) Then
							Dim idx As Worm.Orm.OrmObjectIndex = New Worm.Orm.OrmObjectIndex
							idx.Add(New Worm.Orm.MapField2Column("Id", "id", Me.GetTable(test.Ent2.Ent2SchemaDef.TablesLink.tbldboent2)))
							idx.Add(New Worm.Orm.MapField2Column("Name", "name", Me.GetTable(test.Ent2.Ent2SchemaDef.TablesLink.tbldboent2)))
							Me._idx = idx
						End If
					Finally
						System.Threading.Monitor.Exit(lockCachedExpression_186948f5aec1454ebb40a0c621eef4df)
					End Try
				End If
				Return Me._idx
			End Function
			#End Region
			
			Public Overridable Sub GetSchema(ByVal schema As Worm.Orm.OrmSchemaBase, ByVal t As System.Type) Implements Worm.Orm.IOrmSchemaInit.GetSchema
				Me._schema = schema
				Me._entityType = t
			End Sub
			
			#Region "Nested Types"
			Public Enum TablesLink
				
				#Region "Private Fields"
				tbldboent2 = 0
				#End Region
			End Enum
			#End Region
		End Class
		#End Region
	End Class
End Namespace
