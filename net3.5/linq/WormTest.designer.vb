'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.20506.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="WormTest")>  _
Partial Public Class WormTestDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertTable(instance As Table)
    End Sub
  Partial Private Sub UpdateTable(instance As Table)
    End Sub
  Partial Private Sub DeleteTable(instance As Table)
    End Sub
  Partial Private Sub InsertTables1to3Relation(instance As Tables1to3Relation)
    End Sub
  Partial Private Sub UpdateTables1to3Relation(instance As Tables1to3Relation)
    End Sub
  Partial Private Sub DeleteTables1to3Relation(instance As Tables1to3Relation)
    End Sub
  Partial Private Sub InsertTable1(instance As Table1)
    End Sub
  Partial Private Sub UpdateTable1(instance As Table1)
    End Sub
  Partial Private Sub DeleteTable1(instance As Table1)
    End Sub
  Partial Private Sub InsertTable10(instance As Table10)
    End Sub
  Partial Private Sub UpdateTable10(instance As Table10)
    End Sub
  Partial Private Sub DeleteTable10(instance As Table10)
    End Sub
  Partial Private Sub InsertTable1to1(instance As Table1to1)
    End Sub
  Partial Private Sub UpdateTable1to1(instance As Table1to1)
    End Sub
  Partial Private Sub DeleteTable1to1(instance As Table1to1)
    End Sub
  Partial Private Sub InsertTable2(instance As Table2)
    End Sub
  Partial Private Sub UpdateTable2(instance As Table2)
    End Sub
  Partial Private Sub DeleteTable2(instance As Table2)
    End Sub
  Partial Private Sub InsertTable3(instance As Table3)
    End Sub
  Partial Private Sub UpdateTable3(instance As Table3)
    End Sub
  Partial Private Sub DeleteTable3(instance As Table3)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.linq.My.MySettings.Default.WormTestConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Tables() As System.Data.Linq.Table(Of Table)
		Get
			Return Me.GetTable(Of Table)
		End Get
	End Property
	
	Public ReadOnly Property Tables1to3Relations() As System.Data.Linq.Table(Of Tables1to3Relation)
		Get
			Return Me.GetTable(Of Tables1to3Relation)
		End Get
	End Property
	
	Public ReadOnly Property Table1s() As System.Data.Linq.Table(Of Table1)
		Get
			Return Me.GetTable(Of Table1)
		End Get
	End Property
	
	Public ReadOnly Property Table10s() As System.Data.Linq.Table(Of Table10)
		Get
			Return Me.GetTable(Of Table10)
		End Get
	End Property
	
	Public ReadOnly Property Table1to1s() As System.Data.Linq.Table(Of Table1to1)
		Get
			Return Me.GetTable(Of Table1to1)
		End Get
	End Property
	
	Public ReadOnly Property Table2s() As System.Data.Linq.Table(Of Table2)
		Get
			Return Me.GetTable(Of Table2)
		End Get
	End Property
	
	Public ReadOnly Property Table3s() As System.Data.Linq.Table(Of Table3)
		Get
			Return Me.GetTable(Of Table3)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[Table]")>  _
Partial Public Class Table
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _col As System.Nullable(Of Boolean)
	
	Private _uq As System.Guid
	
	Private _Table2 As EntityRef(Of Table2)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OncolChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OncolChanged()
    End Sub
    Partial Private Sub OnuqChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnuqChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Table2 = CType(Nothing, EntityRef(Of Table2))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._Table2.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_col", DbType:="Bit")>  _
	Public Property col() As System.Nullable(Of Boolean)
		Get
			Return Me._col
		End Get
		Set
			If (Me._col.Equals(value) = false) Then
				Me.OncolChanging(value)
				Me.SendPropertyChanging
				Me._col = value
				Me.SendPropertyChanged("col")
				Me.OncolChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uq", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property uq() As System.Guid
		Get
			Return Me._uq
		End Get
		Set
			If ((Me._uq = value)  _
						= false) Then
				Me.OnuqChanging(value)
				Me.SendPropertyChanging
				Me._uq = value
				Me.SendPropertyChanged("uq")
				Me.OnuqChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Table2_Table", Storage:="_Table2", ThisKey:="id", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property Table2() As Table2
		Get
			Return Me._Table2.Entity
		End Get
		Set
			Dim previousValue As Table2 = Me._Table2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Table2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Table2.Entity = Nothing
					previousValue.Table = Nothing
				End If
				Me._Table2.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Table = Me
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Table2")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Tables1to3Relation")>  _
Partial Public Class Tables1to3Relation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _name As String
	
	Private _table1 As Integer
	
	Private _table3 As Integer
	
	Private _Table11 As EntityRef(Of Table1)
	
	Private _Table31 As EntityRef(Of Table3)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub Ontable1Changing(value As Integer)
    End Sub
    Partial Private Sub Ontable1Changed()
    End Sub
    Partial Private Sub Ontable3Changing(value As Integer)
    End Sub
    Partial Private Sub Ontable3Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Table11 = CType(Nothing, EntityRef(Of Table1))
		Me._Table31 = CType(Nothing, EntityRef(Of Table3))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(50)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_table1", DbType:="Int NOT NULL")>  _
	Public Property table1() As Integer
		Get
			Return Me._table1
		End Get
		Set
			If ((Me._table1 = value)  _
						= false) Then
				If Me._Table11.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Ontable1Changing(value)
				Me.SendPropertyChanging
				Me._table1 = value
				Me.SendPropertyChanged("table1")
				Me.Ontable1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_table3", DbType:="Int NOT NULL")>  _
	Public Property table3() As Integer
		Get
			Return Me._table3
		End Get
		Set
			If ((Me._table3 = value)  _
						= false) Then
				If Me._Table31.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Ontable3Changing(value)
				Me.SendPropertyChanging
				Me._table3 = value
				Me.SendPropertyChanged("table3")
				Me.Ontable3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Table1_Tables1to3Relation", Storage:="_Table11", ThisKey:="table1", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property Table11() As Table1
		Get
			Return Me._Table11.Entity
		End Get
		Set
			Dim previousValue As Table1 = Me._Table11.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Table11.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Table11.Entity = Nothing
					previousValue.Tables1to3Relations.Remove(Me)
				End If
				Me._Table11.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Tables1to3Relations.Add(Me)
					Me._table1 = value.id
				Else
					Me._table1 = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Table11")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Table3_Tables1to3Relation", Storage:="_Table31", ThisKey:="table3", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property Table31() As Table3
		Get
			Return Me._Table31.Entity
		End Get
		Set
			Dim previousValue As Table3 = Me._Table31.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Table31.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Table31.Entity = Nothing
					previousValue.Tables1to3Relations.Remove(Me)
				End If
				Me._Table31.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Tables1to3Relations.Add(Me)
					Me._table3 = value.id
				Else
					Me._table3 = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Table31")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Table1")>  _
Partial Public Class Table1
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _name As String
	
	Private _code As System.Nullable(Of Integer)
	
	Private _enum As System.Nullable(Of Byte)
	
	Private _enum_str As String
	
	Private _dt As Date
	
	Private _Tables1to3Relations As EntitySet(Of Tables1to3Relation)
	
	Private _Table10s As EntitySet(Of Table10)
	
	Private _Table2s As EntitySet(Of Table2)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OncodeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OncodeChanged()
    End Sub
    Partial Private Sub OnenumChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnenumChanged()
    End Sub
    Partial Private Sub Onenum_strChanging(value As String)
    End Sub
    Partial Private Sub Onenum_strChanged()
    End Sub
    Partial Private Sub OndtChanging(value As Date)
    End Sub
    Partial Private Sub OndtChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Tables1to3Relations = New EntitySet(Of Tables1to3Relation)(AddressOf Me.attach_Tables1to3Relations, AddressOf Me.detach_Tables1to3Relations)
		Me._Table10s = New EntitySet(Of Table10)(AddressOf Me.attach_Table10s, AddressOf Me.detach_Table10s)
		Me._Table2s = New EntitySet(Of Table2)(AddressOf Me.attach_Table2s, AddressOf Me.detach_Table2s)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(50)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_code", DbType:="Int")>  _
	Public Property code() As System.Nullable(Of Integer)
		Get
			Return Me._code
		End Get
		Set
			If (Me._code.Equals(value) = false) Then
				Me.OncodeChanging(value)
				Me.SendPropertyChanging
				Me._code = value
				Me.SendPropertyChanged("code")
				Me.OncodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="enum", Storage:="_enum", DbType:="TinyInt")>  _
	Public Property [enum]() As System.Nullable(Of Byte)
		Get
			Return Me._enum
		End Get
		Set
			If (Me._enum.Equals(value) = false) Then
				Me.OnenumChanging(value)
				Me.SendPropertyChanging
				Me._enum = value
				Me.SendPropertyChanged("[enum]")
				Me.OnenumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_enum_str", DbType:="VarChar(50)")>  _
	Public Property enum_str() As String
		Get
			Return Me._enum_str
		End Get
		Set
			If (String.Equals(Me._enum_str, value) = false) Then
				Me.Onenum_strChanging(value)
				Me.SendPropertyChanging
				Me._enum_str = value
				Me.SendPropertyChanged("enum_str")
				Me.Onenum_strChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dt", DbType:="DateTime NOT NULL")>  _
	Public Property dt() As Date
		Get
			Return Me._dt
		End Get
		Set
			If ((Me._dt = value)  _
						= false) Then
				Me.OndtChanging(value)
				Me.SendPropertyChanging
				Me._dt = value
				Me.SendPropertyChanged("dt")
				Me.OndtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Table1_Tables1to3Relation", Storage:="_Tables1to3Relations", ThisKey:="id", OtherKey:="table1")>  _
	Public Property Tables1to3Relations() As EntitySet(Of Tables1to3Relation)
		Get
			Return Me._Tables1to3Relations
		End Get
		Set
			Me._Tables1to3Relations.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Table1_Table10", Storage:="_Table10s", ThisKey:="id", OtherKey:="table1_id")>  _
	Public Property Table10s() As EntitySet(Of Table10)
		Get
			Return Me._Table10s
		End Get
		Set
			Me._Table10s.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Table1_Table2", Storage:="_Table2s", ThisKey:="id", OtherKey:="table1_id")>  _
	Public Property Table2s() As EntitySet(Of Table2)
		Get
			Return Me._Table2s
		End Get
		Set
			Me._Table2s.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Tables1to3Relations(ByVal entity As Tables1to3Relation)
		Me.SendPropertyChanging
		entity.Table11 = Me
	End Sub
	
	Private Sub detach_Tables1to3Relations(ByVal entity As Tables1to3Relation)
		Me.SendPropertyChanging
		entity.Table11 = Nothing
	End Sub
	
	Private Sub attach_Table10s(ByVal entity As Table10)
		Me.SendPropertyChanging
		entity.Table1 = Me
	End Sub
	
	Private Sub detach_Table10s(ByVal entity As Table10)
		Me.SendPropertyChanging
		entity.Table1 = Nothing
	End Sub
	
	Private Sub attach_Table2s(ByVal entity As Table2)
		Me.SendPropertyChanging
		entity.Table1 = Me
	End Sub
	
	Private Sub detach_Table2s(ByVal entity As Table2)
		Me.SendPropertyChanging
		entity.Table1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Table10")>  _
Partial Public Class Table10
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _table1_id As System.Nullable(Of Integer)
	
	Private _Table1 As EntityRef(Of Table1)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Ontable1_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ontable1_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Table1 = CType(Nothing, EntityRef(Of Table1))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_table1_id", DbType:="Int")>  _
	Public Property table1_id() As System.Nullable(Of Integer)
		Get
			Return Me._table1_id
		End Get
		Set
			If (Me._table1_id.Equals(value) = false) Then
				If Me._Table1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Ontable1_idChanging(value)
				Me.SendPropertyChanging
				Me._table1_id = value
				Me.SendPropertyChanged("table1_id")
				Me.Ontable1_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Table1_Table10", Storage:="_Table1", ThisKey:="table1_id", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property Table1() As Table1
		Get
			Return Me._Table1.Entity
		End Get
		Set
			Dim previousValue As Table1 = Me._Table1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Table1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Table1.Entity = Nothing
					previousValue.Table10s.Remove(Me)
				End If
				Me._Table1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Table10s.Add(Me)
					Me._table1_id = value.id
				Else
					Me._table1_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Table1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Table1to1")>  _
Partial Public Class Table1to1
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _table1 As Integer
	
	Private _table1_back As Integer
	
	Private _k As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Ontable1Changing(value As Integer)
    End Sub
    Partial Private Sub Ontable1Changed()
    End Sub
    Partial Private Sub Ontable1_backChanging(value As Integer)
    End Sub
    Partial Private Sub Ontable1_backChanged()
    End Sub
    Partial Private Sub OnkChanging(value As String)
    End Sub
    Partial Private Sub OnkChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_table1", DbType:="Int NOT NULL")>  _
	Public Property table1() As Integer
		Get
			Return Me._table1
		End Get
		Set
			If ((Me._table1 = value)  _
						= false) Then
				Me.Ontable1Changing(value)
				Me.SendPropertyChanging
				Me._table1 = value
				Me.SendPropertyChanged("table1")
				Me.Ontable1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_table1_back", DbType:="Int NOT NULL")>  _
	Public Property table1_back() As Integer
		Get
			Return Me._table1_back
		End Get
		Set
			If ((Me._table1_back = value)  _
						= false) Then
				Me.Ontable1_backChanging(value)
				Me.SendPropertyChanging
				Me._table1_back = value
				Me.SendPropertyChanged("table1_back")
				Me.Ontable1_backChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_k", DbType:="VarChar(50)")>  _
	Public Property k() As String
		Get
			Return Me._k
		End Get
		Set
			If (String.Equals(Me._k, value) = false) Then
				Me.OnkChanging(value)
				Me.SendPropertyChanging
				Me._k = value
				Me.SendPropertyChanged("k")
				Me.OnkChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Table2")>  _
Partial Public Class Table2
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _table1_id As System.Nullable(Of Integer)
	
	Private _blob As System.Data.Linq.Binary
	
	Private _m As System.Nullable(Of Decimal)
	
	Private _dt2 As System.Nullable(Of Date)
	
	Private _Table As EntityRef(Of Table)
	
	Private _Table1 As EntityRef(Of Table1)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Ontable1_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ontable1_idChanged()
    End Sub
    Partial Private Sub OnblobChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnblobChanged()
    End Sub
    Partial Private Sub OnmChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnmChanged()
    End Sub
    Partial Private Sub Ondt2Changing(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Ondt2Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Table = CType(Nothing, EntityRef(Of Table))
		Me._Table1 = CType(Nothing, EntityRef(Of Table1))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_table1_id", DbType:="Int")>  _
	Public Property table1_id() As System.Nullable(Of Integer)
		Get
			Return Me._table1_id
		End Get
		Set
			If (Me._table1_id.Equals(value) = false) Then
				If Me._Table1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Ontable1_idChanging(value)
				Me.SendPropertyChanging
				Me._table1_id = value
				Me.SendPropertyChanged("table1_id")
				Me.Ontable1_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_blob", DbType:="VarBinary(MAX)", CanBeNull:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property blob() As System.Data.Linq.Binary
		Get
			Return Me._blob
		End Get
		Set
			If (Object.Equals(Me._blob, value) = false) Then
				Me.OnblobChanging(value)
				Me.SendPropertyChanging
				Me._blob = value
				Me.SendPropertyChanged("blob")
				Me.OnblobChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_m", DbType:="Money")>  _
	Public Property m() As System.Nullable(Of Decimal)
		Get
			Return Me._m
		End Get
		Set
			If (Me._m.Equals(value) = false) Then
				Me.OnmChanging(value)
				Me.SendPropertyChanging
				Me._m = value
				Me.SendPropertyChanged("m")
				Me.OnmChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dt2", DbType:="DateTime")>  _
	Public Property dt2() As System.Nullable(Of Date)
		Get
			Return Me._dt2
		End Get
		Set
			If (Me._dt2.Equals(value) = false) Then
				Me.Ondt2Changing(value)
				Me.SendPropertyChanging
				Me._dt2 = value
				Me.SendPropertyChanged("dt2")
				Me.Ondt2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Table2_Table", Storage:="_Table", ThisKey:="id", OtherKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property Table() As Table
		Get
			Return Me._Table.Entity
		End Get
		Set
			Dim previousValue As Table = Me._Table.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Table.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Table.Entity = Nothing
					previousValue.Table2 = Nothing
				End If
				Me._Table.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.Table2 = Me
				End If
				Me.SendPropertyChanged("Table")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Table1_Table2", Storage:="_Table1", ThisKey:="table1_id", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property Table1() As Table1
		Get
			Return Me._Table1.Entity
		End Get
		Set
			Dim previousValue As Table1 = Me._Table1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Table1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Table1.Entity = Nothing
					previousValue.Table2s.Remove(Me)
				End If
				Me._Table1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Table2s.Add(Me)
					Me._table1_id = value.id
				Else
					Me._table1_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Table1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Table3")>  _
Partial Public Class Table3
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _ref_id As Integer
	
	Private _code As Byte
	
	Private _v As System.Data.Linq.Binary
	
	Private _x As System.Xml.Linq.XElement
	
	Private _Tables1to3Relations As EntitySet(Of Tables1to3Relation)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onref_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onref_idChanged()
    End Sub
    Partial Private Sub OncodeChanging(value As Byte)
    End Sub
    Partial Private Sub OncodeChanged()
    End Sub
    Partial Private Sub OnvChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnvChanged()
    End Sub
    Partial Private Sub OnxChanging(value As System.Xml.Linq.XElement)
    End Sub
    Partial Private Sub OnxChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Tables1to3Relations = New EntitySet(Of Tables1to3Relation)(AddressOf Me.attach_Tables1to3Relations, AddressOf Me.detach_Tables1to3Relations)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ref_id", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ref_id() As Integer
		Get
			Return Me._ref_id
		End Get
		Set
			If ((Me._ref_id = value)  _
						= false) Then
				Me.Onref_idChanging(value)
				Me.SendPropertyChanging
				Me._ref_id = value
				Me.SendPropertyChanged("ref_id")
				Me.Onref_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_code", DbType:="TinyInt NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property code() As Byte
		Get
			Return Me._code
		End Get
		Set
			If ((Me._code = value)  _
						= false) Then
				Me.OncodeChanging(value)
				Me.SendPropertyChanging
				Me._code = value
				Me.SendPropertyChanged("code")
				Me.OncodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_v", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property v() As System.Data.Linq.Binary
		Get
			Return Me._v
		End Get
		Set
			If (Object.Equals(Me._v, value) = false) Then
				Me.OnvChanging(value)
				Me.SendPropertyChanging
				Me._v = value
				Me.SendPropertyChanged("v")
				Me.OnvChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_x", DbType:="Xml", CanBeNull:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property x() As System.Xml.Linq.XElement
		Get
			Return Me._x
		End Get
		Set
			If (Object.Equals(Me._x, value) = false) Then
				Me.OnxChanging(value)
				Me.SendPropertyChanging
				Me._x = value
				Me.SendPropertyChanged("x")
				Me.OnxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Table3_Tables1to3Relation", Storage:="_Tables1to3Relations", ThisKey:="id", OtherKey:="table3")>  _
	Public Property Tables1to3Relations() As EntitySet(Of Tables1to3Relation)
		Get
			Return Me._Tables1to3Relations
		End Get
		Set
			Me._Tables1to3Relations.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Tables1to3Relations(ByVal entity As Tables1to3Relation)
		Me.SendPropertyChanging
		entity.Table31 = Me
	End Sub
	
	Private Sub detach_Tables1to3Relations(ByVal entity As Tables1to3Relation)
		Me.SendPropertyChanging
		entity.Table31 = Nothing
	End Sub
End Class
